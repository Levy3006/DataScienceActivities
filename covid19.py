# -*- coding: utf-8 -*-
"""Covid19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xR8FhnLs78GPKaintRWXerayCuDW7ydu

# Vacinações Covid 19

---

Vamos iniciar a vizualização de dados em uma tabela de vacinações, primeiramente analisando a tabela e os dados, identificando possiveis inconsistências nos dados, e assim limpando-os, tratando-os ou eliminando-os, conforme a nossa necessidade. Vamos lá?

# Importando as principais bibliotecas
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# lendo o csv e transformando num DataFrame"""

df = pd.read_csv('https://raw.githubusercontent.com/Levy3006/DataSetsKaggle/main/country_vaccinations.csv')

"""# Vizualizando o DataFrame"""

df

"""# Informações gerais sobre o Dataframe"""

df.info()

"""# Tratando Valores NaN"""

df = df.fillna(0)

"""# Informações estatísticas sobre o Dataframe"""

display(df.describe())

"""# Lista de Países"""

#.l Vaccinations_Per_Country = df.loc[df['country'] == 'China']
# Vaccinations_Per_Country
countriesList = df['country'].drop_duplicates()
print("Countries Number:",len(countriesList))
display(countriesList)

"""# Vizualizando Datas"""

print(df['date']) #datas ja estão em ordem crescente
datesNaN = df.loc[df['date'].isna(),'date'].count()
print('dates NaN: ',datesNaN)

"""# Quais países tiveram o maior indice de vacinações diárias? e quais tiveram os menores indices?"""

print("==========================  MAIORES INDICES DE VACINAÇÃO DIÁRIA (EM MÉDIA) ==========================")
maiorVaccDiaria = df[['country','daily_vaccinations_raw']].groupby(by='country').mean().sort_values(by='daily_vaccinations_raw', ascending = False)
display(maiorVaccDiaria)
#
print("==========================  MENORES INDICES DE VACINAÇÃO DIÁRIA (EM MÉDIA) ==========================")
menorVaccDiaria = df[['country','daily_vaccinations_raw']].groupby(by='country').mean().sort_values(by='daily_vaccinations_raw', ascending = True)
display(menorVaccDiaria)

"""# Quais e Quantos são os países com Vacinações Diárias nulas?"""

vaccNulas = menorVaccDiaria.loc[menorVaccDiaria['daily_vaccinations_raw'] == 0.0]
display(vaccNulas)
display('Quantidade: ',vaccNulas.count())

"""# Vizualizando em Gráficos"""

sns.stripplot(x='country',y='daily_vaccinations_raw',data=maiorVaccDiaria[:10], hue='country', size=10 ).set_title("Maiores índices de Vacinação Diária Em Média")

menorVaccDiaria = menorVaccDiaria.loc[menorVaccDiaria['daily_vaccinations_raw']>0.0]
sns.stripplot(x='country',y='daily_vaccinations_raw',data=menorVaccDiaria[:10], hue='country', size=8 ).set_title("Menores índices de Vacinação Diária Não Nulos Em Média")

"""# Explorando as principais colunas: 'total_vaccinations', 'people_vaccinated' e 'people_fully_vaccinated'."""

vaccination_table = df[['people_vaccinated','total_vaccinations','people_fully_vaccinated']].fillna(0)
total_vaccinations = df['total_vaccinations'].sum()
total_People_Vaccinated = df['people_vaccinated'].sum()
total_People_fully_Vaccinated = df['people_fully_vaccinated'].sum()

# percentual de cada variavel em relação ao total : "df['total_vaccinations']"
people_vacc_percent = (total_People_Vaccinated / total_vaccinations)*100
people_fully_percent = (total_People_fully_Vaccinated/total_vaccinations)*100
print("Total de Vacinações: {} => {}%".format(total_vaccinations,100))
print("Total de Pessoas Vacinadas: {} => {}%".format(total_People_Vaccinated,round(people_vacc_percent,2)))
print("Total de Pessoas Totalmente Vacinadas: {} => {}%".format(total_People_fully_Vaccinated,round(people_fully_percent,2)))

"""# **Dados estatísticos sobre as colunas de vacinação**"""

colunasVacinacao = df[['people_vaccinated','total_vaccinations','people_fully_vaccinated']]
print('============ total vaccinations ================')
total = colunasVacinacao['total_vaccinations']
display(total.describe())
print('============ people vaccinated ================')
people = colunasVacinacao['people_vaccinated'].describe()
display(people)
print('============ people fully vaccinated ================')
peopleFully = colunasVacinacao['people_fully_vaccinated'].describe()
display(peopleFully)

"""# dados estatisticos sobre daily_vaccinations_raw de cada país"""

#pegando vacinações totais de um país
chinaVaccinations = df.loc[df['country'] == 'China',['daily_vaccinations_raw','date']]
chinaVaccinations = chinaVaccinations.dropna() #eliminando inválidos
chinaVaccinations
#criando lista de paises:
countries = df['country'].drop_duplicates() # eliminando duplicados
countries.index=[x for x in range(0,223)]   # indexando ascendentemente
listaCountries = [x for x in countries]
listaCountries
#pegando vacinações totais de todos os países

for x in range(0,len(listaCountries)):
  country = listaCountries[x]
  print("===============**{}**===================".format(country))
  CountryVaccinations = df.loc[df['country'] == country,['daily_vaccinations_raw','date']].fillna(0)
  display('DAILY VACCINATIONS RAW (Statistics):',CountryVaccinations['daily_vaccinations_raw'].describe())

"""# 10 maiores indices de vacinação globais"""

dez_maiores = df[['iso_code','country','total_vaccinations']].groupby(by='country').sum().sort_values(by='total_vaccinations', ascending = False)
dez_maiores

dez_maiores = df[['iso_code','country','total_vaccinations']].groupby(by='iso_code').sum().sort_values(by='total_vaccinations', ascending = False)
sns.stripplot(data=dez_maiores[:10],x='iso_code',hue='iso_code',y='total_vaccinations',size=9).set_title('10 Maiores Índices de Vacinações Global')

"""# Correlaciomento de Colunas da tabela

---



---


"""

sns.heatmap(df.corr(), annot = True) #correlacionamento de variáveis